import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';

void main() {
  runApp(BalloonPopGame());
}

class Balloon {
  double xPosition;
  double yPosition;
  bool popped;

  Balloon({required this.xPosition, required this.yPosition, this.popped = false});
}

class BalloonPopGame extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Balloon Pop Game',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: GameScreen(),
    );
  }
}

class GameScreen extends StatefulWidget {
  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  int score = 0;
  int balloonsPopped = 0;
  int balloonsMissed = 0;
  int timeLeft = 120; // 2 minutes in seconds
  Timer? timer;
  List<Balloon> balloons = [];

  @override
  void initState() {
    super.initState();
    startTimer();
    startBalloonGenerator();
  }

  void startTimer() {
    timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (timeLeft > 0) {
          timeLeft--;
        } else {
          timer.cancel();
          calculateFinalScore();
        }
      });
    });
  }

  void startBalloonGenerator() {
    Timer.periodic(Duration(seconds: 2), (timer) {
      if (timeLeft <= 0) {
        timer.cancel();
        return;
      }
      double xPosition = Random().nextDouble() * (MediaQuery.of(context).size.width - 50);
      balloons.add(Balloon(xPosition: xPosition, yPosition: MediaQuery.of(context).size.height));
      setState(() {}); // Update balloons display
    });
    Timer.periodic(Duration(milliseconds: 1000 ~/ 60), (timer) {
      if (timeLeft <= 0) {
        timer.cancel();
        return;
      }
      setState(() {
        balloons.forEach((balloon) {
          balloon.yPosition -= 2; // Move balloons upwards
          if (balloon.yPosition <= 0 && !balloon.popped) {
            balloonsMissed++; // Increment missed count if balloon reaches the top
            balloon.popped = true;
            score -= 1; // Deduct 1 point for missed balloon
          }
        });
        balloons.removeWhere((balloon) => balloon.yPosition < 0); // Remove popped balloons
      });
    });
  }

  void calculateFinalScore() {
    // Calculate final score
    score -= balloonsMissed;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Balloon Pop Game'),
      ),
      body: Container(
        color: Colors.black, // Set background color to black
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Time Left: ${timeLeft ~/ 60}:${(timeLeft % 60).toString().padLeft(2, '0')}',
                style: TextStyle(fontSize: 24, color: Colors.white), // Change text color to white
              ),
              SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Column(
                    children: [
                      Text(
                        'Score',
                        style: TextStyle(fontSize: 20, color: Colors.white), // Change text color to white
                      ),
                      Text(
                        '$score',
                        style: TextStyle(
                          fontSize: 24,
                          color: score >= 0 ? Colors.green : Colors.red,
                        ),
                      ),
                    ],
                  ),
                  Column(
                    children: [
                      Text(
                        'Balloons Popped',
                        style: TextStyle(fontSize: 20, color: Colors.white), // Change text color to white
                      ),
                      Text(
                        '$balloonsPopped',
                        style: TextStyle(fontSize: 24, color: Colors.green),
                      ),
                    ],
                  ),
                  Column(
                    children: [
                      Text(
                        'Balloons Missed',
                        style: TextStyle(fontSize: 20, color: Colors.white), // Change text color to white
                      ),
                      Text(
                        '$balloonsMissed',
                        style: TextStyle(fontSize: 24, color: Colors.red),
                      ),
                    ],
                  ),
                ],
              ),
              Expanded(
                child: GestureDetector(
                  onTapDown: (TapDownDetails details) {
                    setState(() {
                      for (int i = 0; i < balloons.length; i++) {
                        Balloon balloon = balloons[i];
                        if (!balloon.popped && details.localPosition.dx >= balloon.xPosition && details.localPosition.dx <= balloon.xPosition + 50 && details.localPosition.dy >= balloon.yPosition && details.localPosition.dy <= balloon.yPosition + 50) {
                          balloonsPopped++;
                          score += 2;
                          balloon.popped = true;
                          break;
                        }
                      }
                    });
                  },
                  child: Stack(
                    children: balloons.map((balloon) {
                      return Positioned(
                        left: balloon.xPosition,
                        top: balloon.yPosition,
                        child: balloon.popped
                            ? SizedBox()
                            : GestureDetector(
                                onTap: () {
                                  setState(() {
                                    balloonsPopped++;
                                    score += 2;
                                    balloon.popped = true;
                                  });
                                },
                                child: Container(
                                  width: 50,
                                  height: 50,
                                  decoration: BoxDecoration(
                                    color: Colors.blue, // Change balloon color to blue
                                    shape: BoxShape.circle,
                                  ),
                                ),
                              ),
                      );
                    }).toList(),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
